{"version":3,"sources":["webpack:///./index.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAqC;;AAErC;AACA,cAAc,yCAAI;;AAElB;AACA,oBAAoB,oDAAY;AAChC;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAK;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bootstrap.5.bundle.js","sourcesContent":["import * as wasm from 'compose-area';\n\n// Assign wasm module to window object for testing purposes.\nwindow.wasm = wasm;\n\n// Initialize compose area\nconst composeArea = wasm.bind_to('wrapper');\nwindow.composeArea = composeArea;\n\n// Add event listeners\n\nconst wrapper = document.getElementById('wrapper');\nconst logDiv = document.getElementById('log');\n\nfunction log() {\n    console.log(...arguments);\n    let text = '';\n    for (const arg of arguments) {\n        text += arg;\n    }\n    logDiv.innerHTML += `${text}<br>`;\n}\n\n/**\n * When the selection changes, update the caret position.\n *\n * Note: Unfortunately this can only be set on document level, not on the\n * wrapper itself.\n */\ndocument.addEventListener('selectionchange', (e) => {\n    log('selectionchange', e);\n    log('--update_caret_position');\n    composeArea.update_caret_position();\n});\n\n// Composition state\nconst compositionState = {\n    composing: false,\n};\n\n/**\n * On keydown, process the key.\n */\nwrapper.addEventListener('compositionstart', (e) => {\n    log('compositionstart:', e);\n    compositionState.composing = true;\n});\nwrapper.addEventListener('compositionupdate', (e) => {\n    log('compositionupdate:', e);\n});\nwrapper.addEventListener('compositionend', (e) => {\n    log('compositionend:', e);\n    compositionState.composing = false;\n    log('--reload_from_dom');\n    composeArea.reload_from_dom();\n});\nwrapper.addEventListener('change', (e) => {\n    log('change:', e);\n});\nwrapper.addEventListener('keydown', (e) => {\n    log('keydown:', e);\n    if (compositionState.composing) {\n        // Ignore key events while composing\n        e.preventDefault();\n        return;\n    } else if (!e.ctrlKey && !e.altKey && !e.metaKey && e.key !== 'Unidentified') {\n        log('--process_key: ' + e.key);\n        const preventDefault = composeArea.process_key(e.key);\n        if (preventDefault) {\n            e.preventDefault();\n        }\n    }\n});\nwrapper.addEventListener('keyup', (e) => {\n    log('keyup:', e);\n});\nwrapper.addEventListener('keypress', (e) => {\n    log('keypress:', e);\n});\n\n/**\n * This event is fired when an edit event takes place for which we cannot\n * capture the input event.\n *\n * When this happens, reload the internal state from DOM.\n */\nwrapper.addEventListener('input', (e) => {\n    log('input:', e.inputType, e);\n    if (!compositionState.composing) {\n        log('--reload_from_dom');\n        composeArea.reload_from_dom();\n    }\n});\n\n/**\n * On cut, remove the current selection from the internal state.\n *\n * This event is fired before the DOM is modified, before the text-to-be-cut is\n * removed from the input field.\n */\nwrapper.addEventListener('cut', (e) => {\n    log('cut', e);\n    log('--remove_selection');\n    composeArea.remove_selection(false);\n});\n\n/**\n * On paste, override the default paste handler.\n *\n * Instead, insert the clipboard contents into the compose area at the current\n * selection and update the DOM.\n */\nwrapper.addEventListener('paste', (e) => {\n    log('paste', e);\n    const clipboardData = e.clipboardData.getData('text/plain');\n    if (clipboardData) {\n        log('--insert_text: ' + clipboardData);\n        composeArea.insert_text(clipboardData);\n        e.preventDefault();\n    }\n});\n\n// Emoji handling\n\nfunction insertEmoji(e) {\n    log('insertEmoji');\n    const img = e.target.nodeName === 'IMG' ? e.target : e.target.children[0];\n    log('--insert_image');\n    composeArea.insert_image(img.src, img.alt, 'emoji');\n}\ndocument.getElementById('tongue').addEventListener('click', insertEmoji);\ndocument.getElementById('beers').addEventListener('click', insertEmoji);\ndocument.getElementById('facepalm').addEventListener('click', insertEmoji);\n"],"sourceRoot":""}