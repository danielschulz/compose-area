{"version":3,"sources":["webpack:///./node_modules/compose-area/compose_area.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC0C;;AAE1C;;AAEA;AACA;AACA,uEAAuE,+DAAW;AAClF,6CAA6C,+DAAW;AACxD;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,gBAAgB,0EAAsB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,YAAY;AACZ;AACO;AACP;AACA;AACA;AACA,kCAAkC,gEAAY;;AAE9C,KAAK;AACL,QAAQ,wEAAoB;;AAE5B;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,uFAAmC;AACrE;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,+DAAW;AACpF,+CAA+C,+DAAW;AAC1D;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI;AACd,YAAY;AACZ;AACO;AACP;AACA,oCAAoC,2EAAuB;;AAE3D,KAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU,IAAI;AACd,UAAU,QAAQ;AAClB,YAAY;AACZ;AACO;AACP;AACA;AACA,QAAQ,qEAAiB;AACzB;AACA;AACA;;AAEA;AACA,QAAQ,wEAAoB;AAC5B;;;AAGA,KAAK;AACL;;AAEA;;AAEA;;AAEO;AACP;;AAEA;AACA,IAAI,wEAAoB;;AAExB;AACA;;AAEA,yBAAyB,kBAAkB;;AAEpC;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;;AAEA;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEO;;AAEP;AACA;;AAEA;;AAEO;;AAEP;AACA;;AAEA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;;AAEA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEO;;AAEP;AACA;;AAEA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO,wCAAwC,eAAe;;AAEvD;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS,IAAI;AAC/B,UAAU,UAAU;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,iFAA6B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,sFAAkC;AACjD;AACA;AACA,eAAe,sFAAkC;AACjD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,oFAAgC;AAC/C;AACA;AACA,eAAe,oFAAgC;AAC/C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB,wFAAoC;AACpD;AACA;AACA,eAAe,wFAAoC;AACnD;AACA;;AAEA;;AAEA,IAAI,+EAA2B;AAC/B;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB,gFAA4B;;AAEhD,SAAS;AACT,YAAY,wEAAoB;;AAEhC;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iFAA6B;AAC5C;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,gFAA4B;;AAE/C,SAAS;AACT,YAAY,wEAAoB;;AAEhC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA,eAAe,qFAAiC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,0FAAsC;AACrD;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,6EAAyB;AACjC;AACA;AACA;;AAEA;AACA,QAAQ,wEAAoB;AAC5B;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,0EAAsB;AACrC;AACA;;AAEO;AACP;AACA","file":"bootstrap.0.bundle.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './compose_area_bg';\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passStringToWasm(arg) {\n\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = wasm.__wbindgen_malloc(buf.length);\n    getUint8Memory().set(buf, ptr);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n}\n/**\n* Initialize a new compose area wrapper with the specified `id`.\n* @param {string} arg0\n* @returns {ComposeArea}\n*/\nexport function bind_to(arg0) {\n    const ptr0 = passStringToWasm(arg0);\n    const len0 = WASM_VECTOR_LEN;\n    try {\n        return ComposeArea.__wrap(wasm.bind_to(ptr0, len0));\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n\n    }\n\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n* Find the current caret position. If it cannot be determined, the position\n* (0, 0) will be returned.\n*\n* Note: When getting the window selection, it will be relative to an anchor\n*       node. If the anchor node is an element node, then the offset is\n*       referring to the number of child elements. If the anchor node is a\n*       text node, then the offset is referring to the codepoints.\n*\n* TODO: Return a tuple once\n* https://github.com/rustwasm/wasm-bindgen/issues/122 is resolved!\n*\n* TODO: Make this nullable once\n* https://github.com/rustwasm/wasm-bindgen/issues/1252 is resolved!\n* @param {any} arg0\n* @returns {CaretPosition}\n*/\nexport function get_caret_position(arg0) {\n    try {\n        return CaretPosition.__wrap(wasm.get_caret_position(addBorrowedObject(arg0)));\n\n    } finally {\n        heap[stack_pointer++] = undefined;\n\n    }\n\n}\n\n/**\n* Process a DOM node recursively and extract text.\n*\n* Convert elements like images to alt text.\n* @param {any} arg0\n* @param {boolean} arg1\n* @returns {string}\n*/\nexport function extract_text(arg0, arg1) {\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.extract_text(retptr, addBorrowedObject(arg0), arg1);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        heap[stack_pointer++] = undefined;\n\n    }\n\n}\n\nexport function __wbg_error_cc95a3d302735ca3(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n\n    console.error(varg0);\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nexport function __widl_f_debug_1_(arg0) {\n    console.debug(getObject(arg0));\n}\n\nexport function __widl_f_error_1_(arg0) {\n    console.error(getObject(arg0));\n}\n\nexport function __widl_f_info_1_(arg0) {\n    console.info(getObject(arg0));\n}\n\nexport function __widl_f_log_1_(arg0) {\n    console.log(getObject(arg0));\n}\n\nexport function __widl_f_warn_1_(arg0) {\n    console.warn(getObject(arg0));\n}\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction handleError(exnptr, e) {\n    const view = getUint32Memory();\n    view[exnptr / 4] = 1;\n    view[exnptr / 4 + 1] = addHeapObject(e);\n}\n\nexport function __widl_f_replace_with_with_node_1_CharacterData(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).replaceWith(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_create_comment_Document(arg0, arg1, arg2) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    return addHeapObject(getObject(arg0).createComment(varg1));\n}\n\nexport function __widl_f_create_element_Document(arg0, arg1, arg2, exnptr) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    try {\n        return addHeapObject(getObject(arg0).createElement(varg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_create_range_Document(arg0, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).createRange());\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_create_text_node_Document(arg0, arg1, arg2) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    return addHeapObject(getObject(arg0).createTextNode(varg1));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nexport function __widl_f_get_element_by_id_Document(arg0, arg1, arg2) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n\n    const val = getObject(arg0).getElementById(varg1);\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nexport function __widl_f_remove_attribute_Element(arg0, arg1, arg2, exnptr) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    try {\n        getObject(arg0).removeAttribute(varg1);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_set_attribute_Element(arg0, arg1, arg2, arg3, arg4, exnptr) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    let varg3 = getStringFromWasm(arg3, arg4);\n    try {\n        getObject(arg0).setAttribute(varg1, varg3);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_tag_name_Element(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).tagName);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_inner_html_Element(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).innerHTML);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_set_inner_html_Element(arg0, arg1, arg2) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    getObject(arg0).innerHTML = varg1;\n}\n\nexport function __widl_f_outer_html_Element(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).outerHTML);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_replace_with_with_node_1_Element(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).replaceWith(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_instanceof_EventTarget(idx) {\n    return getObject(idx) instanceof EventTarget ? 1 : 0;\n}\n\nexport function __widl_f_add_event_listener_with_callback_EventTarget(arg0, arg1, arg2, arg3, exnptr) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    try {\n        getObject(arg0).addEventListener(varg1, getObject(arg3));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_alt_HTMLImageElement(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).alt);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_append_child_Node(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).appendChild(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_contains_Node(arg0, arg1) {\n    return getObject(arg0).contains(getObject(arg1));\n}\n\nexport function __widl_f_is_same_node_Node(arg0, arg1) {\n    return getObject(arg0).isSameNode(getObject(arg1));\n}\n\nexport function __widl_f_remove_child_Node(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).removeChild(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_node_type_Node(arg0) {\n    return getObject(arg0).nodeType;\n}\n\nexport function __widl_f_node_name_Node(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).nodeName);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_child_nodes_Node(arg0) {\n    return addHeapObject(getObject(arg0).childNodes);\n}\n\nexport function __widl_f_node_value_Node(ret, arg0) {\n    const val = getObject(arg0).nodeValue;\n    const retptr = isLikeNone(val) ? [0, 0] : passStringToWasm(val);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_set_node_value_Node(arg0, arg1, arg2) {\n    let varg1 = arg1 == 0 ? undefined : getStringFromWasm(arg1, arg2);\n    getObject(arg0).nodeValue = varg1;\n}\n\nexport function __widl_f_text_content_Node(ret, arg0) {\n    const val = getObject(arg0).textContent;\n    const retptr = isLikeNone(val) ? [0, 0] : passStringToWasm(val);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_item_NodeList(arg0, arg1) {\n\n    const val = getObject(arg0).item(arg1);\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nexport function __widl_f_get_NodeList(arg0, arg1) {\n\n    const val = getObject(arg0)[arg1];\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nexport function __widl_f_length_NodeList(arg0) {\n    return getObject(arg0).length;\n}\n\nexport function __widl_f_collapse_Range(arg0) {\n    getObject(arg0).collapse();\n}\n\nexport function __widl_f_set_start_Range(arg0, arg1, arg2, exnptr) {\n    try {\n        getObject(arg0).setStart(getObject(arg1), arg2);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_set_start_after_Range(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).setStartAfter(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_set_start_before_Range(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).setStartBefore(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_start_container_Range(arg0, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).startContainer);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_start_offset_Range(arg0, exnptr) {\n    try {\n        return getObject(arg0).startOffset;\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_end_container_Range(arg0, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).endContainer);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_end_offset_Range(arg0, exnptr) {\n    try {\n        return getObject(arg0).endOffset;\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_add_range_Selection(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).addRange(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_get_range_at_Selection(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).getRangeAt(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_range_count_Selection(arg0) {\n    return getObject(arg0).rangeCount;\n}\n\nexport function __widl_instanceof_Window(idx) {\n    return getObject(idx) instanceof Window ? 1 : 0;\n}\n\nexport function __widl_f_get_selection_Window(arg0, exnptr) {\n    try {\n\n        const val = getObject(arg0).getSelection();\n        return isLikeNone(val) ? 0 : addHeapObject(val);\n\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_document_Window(arg0) {\n\n    const val = getObject(arg0).document;\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nexport function __wbg_newnoargs_862ffd91d0c97e88(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    return addHeapObject(new Function(varg0));\n}\n\nexport function __wbg_call_8d65200c7bc9d2d9(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).call(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __wbindgen_object_clone_ref(idx) {\n    return addHeapObject(getObject(idx));\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nexport function __wbindgen_object_drop_ref(i) { dropObject(i); }\n\nexport function __wbindgen_string_new(p, l) {\n    return addHeapObject(getStringFromWasm(p, l));\n}\n\nexport function __wbindgen_debug_string(i, len_ptr) {\n    const toString = Object.prototype.toString;\n    const debug_str = val => {\n        // primitive types\n        const type = typeof val;\n        if (type == 'number' || type == 'boolean' || val == null) {\n            return  `${val}`;\n        }\n        if (type == 'string') {\n            return `\"${val}\"`;\n        }\n        if (type == 'symbol') {\n            const description = val.description;\n            if (description == null) {\n                return 'Symbol';\n            } else {\n                return `Symbol(${description})`;\n            }\n        }\n        if (type == 'function') {\n            const name = val.name;\n            if (typeof name == 'string' && name.length > 0) {\n                return `Function(${name})`;\n            } else {\n                return 'Function';\n            }\n        }\n        // objects\n        if (Array.isArray(val)) {\n            const length = val.length;\n            let debug = '[';\n            if (length > 0) {\n                debug += debug_str(val[0]);\n            }\n            for(let i = 1; i < length; i++) {\n                debug += ', ' + debug_str(val[i]);\n            }\n            debug += ']';\n            return debug;\n        }\n        // Test for built-in\n        const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n        let className;\n        if (builtInMatches.length > 1) {\n            className = builtInMatches[1];\n        } else {\n            // Failed to match the standard '[object ClassName]'\n            return toString.call(val);\n        }\n        if (className == 'Object') {\n            // we're a user defined class or Object\n            // JSON.stringify avoids problems with cycles, and is generally much\n            // easier than looping through ownProperties of `val`.\n            try {\n                return 'Object(' + JSON.stringify(val) + ')';\n            } catch (_) {\n                return 'Object';\n            }\n        }\n        // errors\n        if (val instanceof Error) {\n        return `${val.name}: ${val.message}\n        ${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n};\nconst val = getObject(i);\nconst debug = debug_str(val);\nconst ptr = passStringToWasm(debug);\ngetUint32Memory()[len_ptr / 4] = WASM_VECTOR_LEN;\nreturn ptr;\n}\n\nfunction freeCaretPosition(ptr) {\n\n    wasm.__wbg_caretposition_free(ptr);\n}\n/**\n* A caret position specifies the offset in the HTML source code relative to\n* the start of the wrapper element.\n*\n* Example: If the caret is at the end of this wrapper element:\n*\n* ```html\n* <div id=\\\"wrapper\\\">hi<br></div>\n* ```\n*\n* ...then the offset will be 6.\n*/\nexport class CaretPosition {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CaretPosition.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeCaretPosition(ptr);\n    }\n\n    /**\n    * @returns {number}\n    */\n    get start() {\n        return wasm.__wbg_get_caretposition_start(this.ptr);\n    }\n    set start(arg0) {\n        return wasm.__wbg_set_caretposition_start(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get end() {\n        return wasm.__wbg_get_caretposition_end(this.ptr);\n    }\n    set end(arg0) {\n        return wasm.__wbg_set_caretposition_end(this.ptr, arg0);\n    }\n    /**\n    * @returns {boolean}\n    */\n    get success() {\n        return (wasm.__wbg_get_caretposition_success(this.ptr)) !== 0;\n    }\n    set success(arg0) {\n        return wasm.__wbg_set_caretposition_success(this.ptr, arg0);\n    }\n}\n\nfunction freeComposeArea(ptr) {\n\n    wasm.__wbg_composearea_free(ptr);\n}\n/**\n* The context object containing the state.\n*/\nexport class ComposeArea {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ComposeArea.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeComposeArea(ptr);\n    }\n\n    /**\n    * Handle the specified key.\n    *\n    * Return whether the default keyup event handler should be prevented from running.\n    * @param {string} arg0\n    * @returns {boolean}\n    */\n    process_key(arg0) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        try {\n            return (wasm.composearea_process_key(this.ptr, ptr0, len0)) !== 0;\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * Insert an image.\n    * @param {string} arg0\n    * @param {string} arg1\n    * @param {string} arg2\n    * @returns {void}\n    */\n    insert_image(arg0, arg1, arg2) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm(arg1);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm(arg2);\n        const len2 = WASM_VECTOR_LEN;\n        return wasm.composearea_insert_image(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n    }\n    /**\n    * Insert plain text.\n    * @param {string} arg0\n    * @returns {void}\n    */\n    insert_text(arg0) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        try {\n            return wasm.composearea_insert_text(this.ptr, ptr0, len0);\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * Remove the current selection from the state.\n    *\n    * If the `patch_dom` parameter is set to `true`, then the DOM is also\n    * updated (followed by a caret position refresh), otherwise it\\'s not modified.\n    * @param {boolean} arg0\n    * @returns {void}\n    */\n    remove_selection(arg0) {\n        return wasm.composearea_remove_selection(this.ptr, arg0);\n    }\n    /**\n    * Update the caret position.\n    *\n    * Read the actual position from the DOM using the selection API and then\n    * overwrite the caret position in the state object.\n    *\n    * Call this after every action that might have modified the DOM.\n    * @returns {void}\n    */\n    update_caret_position() {\n        return wasm.composearea_update_caret_position(this.ptr);\n    }\n    /**\n    * Extract the text in the compose area.\n    *\n    * Convert elements like images to alt text.\n    * @param {boolean} arg0\n    * @returns {string}\n    */\n    get_text(arg0) {\n        const retptr = globalArgumentPtr();\n        wasm.composearea_get_text(retptr, this.ptr, arg0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * Reset the internal state and clear the wrapper element.\n    * @returns {void}\n    */\n    reset() {\n        return wasm.composearea_reset(this.ptr);\n    }\n}\n\nexport function __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n"],"sourceRoot":""}