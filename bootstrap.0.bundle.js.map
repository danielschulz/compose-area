{"version":3,"sources":["webpack:///./node_modules/compose-area/compose_area.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;;AAE1C;;AAEA;AACA;AACA,uEAAuE,+DAAW;AAClF,6CAA6C,+DAAW;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,uFAAmC;AACrE;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,+DAAW;AACpF,+CAA+C,+DAAW;AAC1D;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB,0EAAsB;AACxC;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA,kBAAkB,2EAAuB;AACzC;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA,oBAAoB,0EAAsB;AAC1C;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,kBAAkB;;AAE3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI;AACd,UAAU,QAAQ;AAClB,YAAY;AACZ;AACO;AACP;AACA;AACA,QAAQ,qEAAiB;AACzB;AACA;AACA;;AAEA;AACA,QAAQ,wEAAoB;AAC5B;;;AAGA,KAAK;AACL;;AAEA;;AAEA;;AAEO;AACP;;AAEA;AACA,IAAI,wEAAoB;;AAExB;AACA;;AAEO;AACP;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO,+CAA+C,wDAAwD;;AAE9G;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO,yCAAyC,kDAAkD;;AAE3F;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;;AAEO,6CAA6C,sDAAsD;;AAEnG;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;;AAEO;;AAEP;AACA;;AAEA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEO;;AAEP;AACA;;AAEA;;AAEO;;AAEP;AACA;;AAEA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;;AAEO,wCAAwC,iDAAiD;;AAEzF;AACP;;AAEA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEO;;AAEP;AACA;;AAEA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO,sCAAsC,+CAA+C;;AAErF;AACP;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS,IAAI;AAC/B,UAAU,UAAU;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;;AAEA,IAAI,+EAA2B;AAC/B;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,IAAI;AAClB,gBAAgB;AAChB;AACA;AACA,kCAAkC,4EAAwB;AAC1D;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kCAAkC,0FAAsC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB,4FAAwC;AACxD;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iFAA6B;;AAE3D,SAAS;AACT,YAAY,wEAAoB;AAChC,YAAY,wEAAoB;AAChC,YAAY,wEAAoB;;AAEhC;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,gFAA4B;;AAE/C,SAAS;AACT,YAAY,wEAAoB;;AAEhC;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,gFAA4B;;AAE/C,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kCAAkC,gFAA4B;AAC9D;AACA;AACA;AACA;AACA;AACA,cAAc,oBAAoB;AAClC,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,6EAAyB;AACjC;AACA;AACA;;AAEA;AACA,QAAQ,wEAAoB;AAC5B;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,0EAAsB;AACrC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,0EAAsB;AACrC;AACA;;AAEA;;AAEA,IAAI,+EAA2B;AAC/B;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,8EAA0B;AAClC;AACA;AACA;;AAEA;AACA,QAAQ,wEAAoB;AAC5B;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,sFAAkC;AAC1C;AACA;AACA;;AAEA;AACA,QAAQ,wEAAoB;AAC5B;;AAEA;AACA;;AAEO;AACP;AACA;;AAEO,wCAAwC,eAAe","file":"bootstrap.0.bundle.js","sourcesContent":["import * as wasm from './compose_area_bg';\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let writeOffset = 0;\n        while (true) {\n            const view = getUint8Memory().subarray(ptr + writeOffset, ptr + size);\n            const { read, written } = cachedTextEncoder.encodeInto(arg, view);\n            writeOffset += written;\n            if (read === arg.length) {\n                break;\n            }\n            arg = arg.substring(read);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size += arg.length * 3);\n        }\n        WASM_VECTOR_LEN = writeOffset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = wasm.__wbindgen_malloc(buf.length);\n        getUint8Memory().set(buf, ptr);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    };\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n/**\n* Process a DOM node recursively and extract text.\n*\n* Convert elements like images to alt text.\n* @param {any} root_element\n* @param {boolean} no_trim\n* @returns {string}\n*/\nexport function extract_text(root_element, no_trim) {\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.extract_text(retptr, addBorrowedObject(root_element), no_trim);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        heap[stack_pointer++] = undefined;\n\n    }\n\n}\n\nexport function __wbg_error_4bb6c2a97407129a(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n\n    console.error(varg0);\n}\n\nexport function __wbg_new_59cb74e423758ede() {\n    return addHeapObject(new Error());\n}\n\nexport function __wbg_stack_558ba5917b466edd(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).stack);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_debug_1_(arg0) {\n    console.debug(getObject(arg0));\n}\n\nexport function __widl_f_error_1_(arg0) {\n    console.error(getObject(arg0));\n}\n\nexport function __widl_f_info_1_(arg0) {\n    console.info(getObject(arg0));\n}\n\nexport function __widl_f_log_1_(arg0) {\n    console.log(getObject(arg0));\n}\n\nexport function __widl_f_warn_1_(arg0) {\n    console.warn(getObject(arg0));\n}\n\nexport function __widl_instanceof_CharacterData(idx) { return getObject(idx) instanceof CharacterData ? 1 : 0; }\n\nfunction handleError(exnptr, e) {\n    const view = getUint32Memory();\n    view[exnptr / 4] = 1;\n    view[exnptr / 4 + 1] = addHeapObject(e);\n}\n\nexport function __widl_f_add_2_DOMTokenList(arg0, arg1, arg2, arg3, arg4, exnptr) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    let varg3 = getStringFromWasm(arg3, arg4);\n    try {\n        getObject(arg0).add(varg1, varg3);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_create_element_Document(arg0, arg1, arg2, exnptr) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    try {\n        return addHeapObject(getObject(arg0).createElement(varg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_create_range_Document(arg0, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).createRange());\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_create_text_node_Document(arg0, arg1, arg2) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    return addHeapObject(getObject(arg0).createTextNode(varg1));\n}\n\nexport function __widl_instanceof_Element(idx) { return getObject(idx) instanceof Element ? 1 : 0; }\n\nexport function __widl_f_set_attribute_Element(arg0, arg1, arg2, arg3, arg4, exnptr) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    let varg3 = getStringFromWasm(arg3, arg4);\n    try {\n        getObject(arg0).setAttribute(varg1, varg3);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_tag_name_Element(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).tagName);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_id_Element(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).id);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_class_list_Element(arg0) {\n    return addHeapObject(getObject(arg0).classList);\n}\n\nexport function __widl_instanceof_HTMLElement(idx) { return getObject(idx) instanceof HTMLElement ? 1 : 0; }\n\nexport function __widl_f_focus_HTMLElement(arg0, exnptr) {\n    try {\n        getObject(arg0).focus();\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_alt_HTMLImageElement(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).alt);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_append_child_Node(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).appendChild(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_contains_Node(arg0, arg1) {\n    return getObject(arg0).contains(getObject(arg1));\n}\n\nexport function __widl_f_has_child_nodes_Node(arg0) {\n    return getObject(arg0).hasChildNodes();\n}\n\nexport function __widl_f_insert_before_Node(arg0, arg1, arg2, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).insertBefore(getObject(arg1), getObject(arg2)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_normalize_Node(arg0) {\n    getObject(arg0).normalize();\n}\n\nexport function __widl_f_remove_child_Node(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).removeChild(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_node_type_Node(arg0) {\n    return getObject(arg0).nodeType;\n}\n\nexport function __widl_f_node_name_Node(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).nodeName);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_child_nodes_Node(arg0) {\n    return addHeapObject(getObject(arg0).childNodes);\n}\n\nexport function __widl_f_last_child_Node(arg0) {\n\n    const val = getObject(arg0).lastChild;\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nexport function __widl_f_node_value_Node(ret, arg0) {\n    const val = getObject(arg0).nodeValue;\n    const retptr = isLikeNone(val) ? [0, 0] : passStringToWasm(val);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_item_NodeList(arg0, arg1) {\n\n    const val = getObject(arg0).item(arg1 >>> 0);\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nexport function __widl_f_get_NodeList(arg0, arg1) {\n\n    const val = getObject(arg0)[arg1 >>> 0];\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nexport function __widl_f_length_NodeList(arg0) {\n    return getObject(arg0).length;\n}\n\nexport function __widl_f_clone_range_Range(arg0) {\n    return addHeapObject(getObject(arg0).cloneRange());\n}\n\nexport function __widl_f_collapse_with_to_start_Range(arg0, arg1) {\n    getObject(arg0).collapse(arg1 !== 0);\n}\n\nexport function __widl_f_delete_contents_Range(arg0, exnptr) {\n    try {\n        getObject(arg0).deleteContents();\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_insert_node_Range(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).insertNode(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_set_end_Range(arg0, arg1, arg2, exnptr) {\n    try {\n        getObject(arg0).setEnd(getObject(arg1), arg2 >>> 0);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_set_end_after_Range(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).setEndAfter(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_set_end_before_Range(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).setEndBefore(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_set_start_Range(arg0, arg1, arg2, exnptr) {\n    try {\n        getObject(arg0).setStart(getObject(arg1), arg2 >>> 0);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_set_start_after_Range(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).setStartAfter(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_set_start_before_Range(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).setStartBefore(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_start_container_Range(arg0, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).startContainer);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_start_offset_Range(arg0, exnptr) {\n    try {\n        return getObject(arg0).startOffset;\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_end_container_Range(arg0, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).endContainer);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_end_offset_Range(arg0, exnptr) {\n    try {\n        return getObject(arg0).endOffset;\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_common_ancestor_container_Range(arg0, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).commonAncestorContainer);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_add_range_Selection(arg0, arg1, exnptr) {\n    try {\n        getObject(arg0).addRange(getObject(arg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_get_range_at_Selection(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).getRangeAt(arg1 >>> 0));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_remove_all_ranges_Selection(arg0, exnptr) {\n    try {\n        getObject(arg0).removeAllRanges();\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_range_count_Selection(arg0) {\n    return getObject(arg0).rangeCount;\n}\n\nexport function __widl_instanceof_Window(idx) { return getObject(idx) instanceof Window ? 1 : 0; }\n\nexport function __widl_f_get_selection_Window(arg0, exnptr) {\n    try {\n\n        const val = getObject(arg0).getSelection();\n        return isLikeNone(val) ? 0 : addHeapObject(val);\n\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_document_Window(arg0) {\n\n    const val = getObject(arg0).document;\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nexport function __wbg_newnoargs_cb83ac9bfa714d41(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    return addHeapObject(new Function(varg0));\n}\n\nexport function __wbg_call_75755734bfea4d37(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).call(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __wbindgen_string_new(p, l) { return addHeapObject(getStringFromWasm(p, l)); }\n\nexport function __wbindgen_debug_string(i, len_ptr) {\n    const debug_str =\n    val => {\n        // primitive types\n        const type = typeof val;\n        if (type == 'number' || type == 'boolean' || val == null) {\n            return  `${val}`;\n        }\n        if (type == 'string') {\n            return `\"${val}\"`;\n        }\n        if (type == 'symbol') {\n            const description = val.description;\n            if (description == null) {\n                return 'Symbol';\n            } else {\n                return `Symbol(${description})`;\n            }\n        }\n        if (type == 'function') {\n            const name = val.name;\n            if (typeof name == 'string' && name.length > 0) {\n                return `Function(${name})`;\n            } else {\n                return 'Function';\n            }\n        }\n        // objects\n        if (Array.isArray(val)) {\n            const length = val.length;\n            let debug = '[';\n            if (length > 0) {\n                debug += debug_str(val[0]);\n            }\n            for(let i = 1; i < length; i++) {\n                debug += ', ' + debug_str(val[i]);\n            }\n            debug += ']';\n            return debug;\n        }\n        // Test for built-in\n        const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n        let className;\n        if (builtInMatches.length > 1) {\n            className = builtInMatches[1];\n        } else {\n            // Failed to match the standard '[object ClassName]'\n            return toString.call(val);\n        }\n        if (className == 'Object') {\n            // we're a user defined class or Object\n            // JSON.stringify avoids problems with cycles, and is generally much\n            // easier than looping through ownProperties of `val`.\n            try {\n                return 'Object(' + JSON.stringify(val) + ')';\n            } catch (_) {\n                return 'Object';\n            }\n        }\n        // errors\n        if (val instanceof Error) {\n        return `${val.name}: ${val.message}\n        ${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n;\nconst toString = Object.prototype.toString;\nconst val = getObject(i);\nconst debug = debug_str(val);\nconst ptr = passStringToWasm(debug);\ngetUint32Memory()[len_ptr / 4] = WASM_VECTOR_LEN;\nreturn ptr;\n}\n\nexport function __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction freeComposeArea(ptr) {\n\n    wasm.__wbg_composearea_free(ptr);\n}\n/**\n* The context object containing the state.\n*/\nexport class ComposeArea {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ComposeArea.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeComposeArea(ptr);\n    }\n\n    /**\n    * Initialize a new compose area wrapper.\n    * @param {any} wrapper\n    * @returns {ComposeArea}\n    */\n    static bind_to(wrapper) {\n        return ComposeArea.__wrap(wasm.composearea_bind_to(addHeapObject(wrapper)));\n    }\n    /**\n    * Store the current selection range.\n    * Return the stored range.\n    * @returns {RangeResult}\n    */\n    store_selection_range() {\n        return RangeResult.__wrap(wasm.composearea_store_selection_range(this.ptr));\n    }\n    /**\n    * Restore the stored selection range.\n    *\n    * Return a boolean indicating whether a selection range was stored (and\n    * thus restored).\n    * @returns {boolean}\n    */\n    restore_selection_range() {\n        return (wasm.composearea_restore_selection_range(this.ptr)) !== 0;\n    }\n    /**\n    * Insert an image at the current caret position.\n    *\n    * Return a reference to the inserted image element.\n    * @param {string} src\n    * @param {string} alt\n    * @param {string} cls\n    * @returns {any}\n    */\n    insert_image(src, alt, cls) {\n        const ptr0 = passStringToWasm(src);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm(alt);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm(cls);\n        const len2 = WASM_VECTOR_LEN;\n        try {\n            return takeObject(wasm.composearea_insert_image(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2));\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n            wasm.__wbindgen_free(ptr1, len1 * 1);\n            wasm.__wbindgen_free(ptr2, len2 * 1);\n\n        }\n\n    }\n    /**\n    * Insert plain text at the current caret position.\n    * @param {string} text\n    * @returns {void}\n    */\n    insert_text(text) {\n        const ptr0 = passStringToWasm(text);\n        const len0 = WASM_VECTOR_LEN;\n        try {\n            return wasm.composearea_insert_text(this.ptr, ptr0, len0);\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * Insert the specified node at the previously stored selection range.\n    * Set the caret position to right after the newly inserted node.\n    * @param {any} node_ref\n    * @returns {void}\n    */\n    insert_node(node_ref) {\n        try {\n            return wasm.composearea_insert_node(this.ptr, addBorrowedObject(node_ref));\n\n        } finally {\n            heap[stack_pointer++] = undefined;\n\n        }\n\n    }\n    /**\n    * Return the last range of the selection that is within the wrapper\n    * element.\n    * @returns {RangeResult}\n    */\n    fetch_range() {\n        return RangeResult.__wrap(wasm.composearea_fetch_range(this.ptr));\n    }\n    /**\n    * Extract the text in the compose area.\n    *\n    * Convert elements like images to alt text.\n    * @param {boolean | undefined} no_trim\n    * @returns {string}\n    */\n    get_text(no_trim) {\n        const retptr = globalArgumentPtr();\n        wasm.composearea_get_text(retptr, this.ptr, isLikeNone(no_trim) ? 0xFFFFFF : no_trim ? 1 : 0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * Focus the compose area.\n    * @returns {void}\n    */\n    focus() {\n        return wasm.composearea_focus(this.ptr);\n    }\n    /**\n    * Clear the contents of the compose area.\n    * @returns {void}\n    */\n    clear() {\n        return wasm.composearea_clear(this.ptr);\n    }\n}\n\nfunction freeRangeResult(ptr) {\n\n    wasm.__wbg_rangeresult_free(ptr);\n}\n/**\n*/\nexport class RangeResult {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RangeResult.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeRangeResult(ptr);\n    }\n\n    /**\n    * Used by JS code to show a string representation of the range.\n    * @returns {string}\n    */\n    to_string() {\n        const retptr = globalArgumentPtr();\n        wasm.rangeresult_to_string(retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * Used by JS code to show a string representation of the range.\n    * @returns {string}\n    */\n    to_string_compact() {\n        const retptr = globalArgumentPtr();\n        wasm.rangeresult_to_string_compact(retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n}\n\nexport function __wbindgen_object_clone_ref(idx) {\n    return addHeapObject(getObject(idx));\n}\n\nexport function __wbindgen_object_drop_ref(i) { dropObject(i); }\n\n"],"sourceRoot":""}