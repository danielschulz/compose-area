{"version":3,"sources":["webpack:///./benchmark.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACuB;AACgB;;AAEvC;AACqC;;AAErC;AACA,mBAAmB,sCAAS;AAC5B,cAAc,yCAAI;;AAElB;AACA,kBAAkB,+CAAe;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA,KAAK;AACL,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO,oBAAoB,KAAK,OAAO,IAAI,KAAK,QAAQ,gBAAgB,IAAI,OAAO,IAAI;AAC1G,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;;AAED;AACA;AACA,eAAe,YAAY;AAC3B,CAAC","file":"bootstrap.4.bundle.js","sourcesContent":["// benchmark.js\nimport _ from 'lodash';\nimport * as Benchmark from 'benchmark';\n\n// compose-area\nimport * as wasm from 'compose-area';\n\n// Assign modules to window object for testing purposes.\nwindow.Benchmark = Benchmark;\nwindow.wasm = wasm;\n\n// Create benchmark suite\nconst suite = new Benchmark.Suite;\n\n// Setup and teardown helpers\nwindow.setupTest = function() {\n    const rand = () => Math.random().toString(36).substring(7);\n    const divId = 'test-' + rand() + rand();\n    const baseWrapper = document.getElementById('wrapper');\n    const testDiv = document.createElement('div');\n    testDiv.id = divId;\n    baseWrapper.appendChild(testDiv)\n    const composeArea = window.wasm.bind_to(divId);\n    return {\n        divId: divId,\n        testDiv: testDiv,\n        composeArea: composeArea,\n    }\n}\nwindow.teardownTest = function(divId) {\n    const baseWrapper = document.getElementById('wrapper');\n    baseWrapper.removeChild(document.getElementById(divId));\n}\n\n/**\n * Helper: Move the caret using simulated keystrokes.\n * Positive values go to the right, negative values to the left.\n */\nwindow.moveCaret = function(composeArea, offset) {\n    if (offset < 0) {\n        for (let i = 0; i < -offset; i++) {\n            composeArea.process_key('ArrowLeft');\n        }\n    } else {\n        for (let i = 0; i < offset; i++) {\n            composeArea.process_key('ArrowRight');\n        }\n    }\n}\n\n// Add benchmark tests\nsuite.add('1. Process keypresses in \"hello world\"', {\n    setup: () => {\n        const ctx = setupTest();\n    },\n    fn: function(a, b, c) {\n        for (const key of ['h', 'e', 'l', 'l', 'o', 'Space', 'w', 'o', 'r', 'l', 'd']) {\n            ctx.composeArea.process_key(key);\n        }\n    },\n    teardown: () => {\n        teardownTest(ctx.divId);\n    },\n});\nsuite.add('2. Insert text \"hello world\"', {\n    setup: () => {\n        const ctx = setupTest();\n    },\n    fn: () => {\n        ctx.composeArea.insert_text('hello world');\n    },\n    teardown: () => {\n        teardownTest(ctx.divId);\n    },\n});\nsuite.add('3. Insert image between text', {\n    setup: () => {\n        const ctx = setupTest();\n        ctx.composeArea.insert_text('helloworld');\n        moveCaret(ctx.composeArea, -5);\n    },\n    fn: () => {\n        ctx.composeArea.insert_image('emoji.png', 'smile', 'emoji');\n    },\n    teardown: () => {\n        teardownTest(ctx.divId);\n    },\n    minSamples: 25,\n});\nsuite.add('4. Extract text from compose area', {\n    setup: () => {\n        const ctx = setupTest();\n        ctx.composeArea.insert_text('hello world ');\n        ctx.composeArea.insert_image('emoji.png', ':smile:', 'emoji');\n        ctx.composeArea.process_key('Enter');\n        ctx.composeArea.insert_text('This is a new line and some emoji: ');\n        ctx.composeArea.insert_image('emoji1.png', ':smile:', 'emoji');\n        ctx.composeArea.insert_image('emoji2.png', ':smil:', 'emoji');\n        ctx.composeArea.insert_image('emoji3.png', ':smi:', 'emoji');\n        ctx.composeArea.insert_text(' end emoji');\n    },\n    fn: () => {\n        window.lastText = ctx.composeArea.get_text();\n    },\n    teardown: () => {\n        teardownTest(ctx.divId);\n    },\n});\nsuite.add('5. Get caret position', {\n    setup: () => {\n        const ctx = setupTest();\n        ctx.composeArea.insert_text('hello world ');\n        ctx.composeArea.insert_image('emoji.png', ':smile:', 'emoji');\n        ctx.composeArea.process_key('Enter');\n        ctx.composeArea.insert_text('This is a new line and some emoji: ');\n        ctx.composeArea.insert_image('emoji1.png', ':smile:', 'emoji');\n        ctx.composeArea.insert_image('emoji2.png', ':smil:', 'emoji');\n        ctx.composeArea.insert_image('emoji3.png', ':smi:', 'emoji');\n        ctx.composeArea.insert_text(' end emoji');\n        moveCaret(ctx.composeArea, -3);\n    },\n    fn: () => {\n        window.lastPos = window.wasm.get_caret_position(ctx.testDiv);\n    },\n    teardown: () => {\n        teardownTest(ctx.divId);\n    },\n});\n\n// Add listeners\nsuite.on('start', function() {\n    document.getElementById('results').innerHTML += 'Starting benchmark...<br><br>';\n});\nsuite.on('cycle', function(e) {\n    const t = e.target;\n    const s = t.stats;\n    const mean = (s.mean * 1000).toFixed(3);\n    const rme = s.rme.toFixed(2);\n    const samples = s.sample.length;\n    const min = (Math.min(...s.sample) * 1000).toFixed(3);\n    const max = (Math.max(...s.sample) * 1000).toFixed(3);\n    document.getElementById('results').innerHTML +=\n        `<strong>${t.name}</strong><br>mean ${mean} ms Â±${rme}% (${samples} samples, min=${min} max=${max})<br>`;\n});\nsuite.on('complete', function() {\n    document.getElementById('results').innerHTML += '<br>Benchmark complete!<br>';\n});\nsuite.on('error', function(e) {\n    console.error('Benchmark error:', e.target.error);\n});\n\n// Add start button event listener\ndocument.getElementById('start').addEventListener('click', (e) => {\n    suite.run({async: true});\n});\n"],"sourceRoot":""}